{"ast":null,"code":"export var Schema = /*#__PURE__*/function () {\n  function Schema(schema) {\n    this.spec = void 0;\n    this.data = void 0;\n    this.spec = schema;\n  }\n  var _proto = Schema.prototype;\n  _proto.getFieldType = function getFieldType(fieldName) {\n    var _this$spec;\n    return (_this$spec = this.spec) === null || _this$spec === void 0 ? void 0 : _this$spec[fieldName];\n  };\n  _proto.getKeys = function getKeys() {\n    return Object.keys(this.spec);\n  };\n  _proto.setSchemaOptionsForAllType = function setSchemaOptionsForAllType(data) {\n    var _this = this;\n    if (data === this.data) {\n      return;\n    }\n    Object.entries(this.spec).forEach(function (_ref) {\n      var key = _ref[0],\n        type = _ref[1];\n      type.setSchemaOptions(_this.spec, data === null || data === void 0 ? void 0 : data[key]);\n    });\n    this.data = data;\n  };\n  _proto.checkForField = function checkForField(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    var fieldChecker = this.spec[fieldName];\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return {\n        hasError: false\n      };\n    }\n    return fieldChecker.check(data[fieldName], data, fieldName);\n  };\n  _proto.checkForFieldAsync = function checkForFieldAsync(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    var fieldChecker = this.spec[fieldName];\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return Promise.resolve({\n        hasError: false\n      });\n    }\n    return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n  };\n  _proto.check = function check(data) {\n    var _this2 = this;\n    var checkResult = {};\n    Object.keys(this.spec).forEach(function (key) {\n      if (typeof data === 'object') {\n        checkResult[key] = _this2.checkForField(key, data);\n      }\n    });\n    return checkResult;\n  };\n  _proto.checkAsync = function checkAsync(data) {\n    var _this3 = this;\n    var checkResult = {};\n    var promises = [];\n    var keys = [];\n    Object.keys(this.spec).forEach(function (key) {\n      keys.push(key);\n      promises.push(_this3.checkForFieldAsync(key, data));\n    });\n    return Promise.all(promises).then(function (values) {\n      for (var i = 0; i < values.length; i += 1) {\n        checkResult[keys[i]] = values[i];\n      }\n      return checkResult;\n    });\n  };\n  return Schema;\n}();\nexport function SchemaModel(o) {\n  return new Schema(o);\n}\nSchemaModel.combine = function combine() {\n  for (var _len = arguments.length, specs = new Array(_len), _key = 0; _key < _len; _key++) {\n    specs[_key] = arguments[_key];\n  }\n  return new Schema(specs.map(function (model) {\n    return model.spec;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};","map":{"version":3,"names":["Schema","schema","spec","data","_proto","prototype","getFieldType","fieldName","_this$spec","getKeys","Object","keys","setSchemaOptionsForAllType","_this","entries","forEach","_ref","key","type","setSchemaOptions","checkForField","fieldChecker","hasError","check","checkForFieldAsync","Promise","resolve","checkAsync","_this2","checkResult","_this3","promises","push","all","then","values","i","length","SchemaModel","o","combine","_len","arguments","specs","Array","_key","map","model","reduce","accumulator","currentValue","assign"],"sources":["/Users/ethanpineda/Desktop/Personal Projects/Ethan-main/node_modules/schema-typed/es/Schema.js"],"sourcesContent":["export var Schema = /*#__PURE__*/function () {\n  function Schema(schema) {\n    this.spec = void 0;\n    this.data = void 0;\n    this.spec = schema;\n  }\n\n  var _proto = Schema.prototype;\n\n  _proto.getFieldType = function getFieldType(fieldName) {\n    var _this$spec;\n\n    return (_this$spec = this.spec) === null || _this$spec === void 0 ? void 0 : _this$spec[fieldName];\n  };\n\n  _proto.getKeys = function getKeys() {\n    return Object.keys(this.spec);\n  };\n\n  _proto.setSchemaOptionsForAllType = function setSchemaOptionsForAllType(data) {\n    var _this = this;\n\n    if (data === this.data) {\n      return;\n    }\n\n    Object.entries(this.spec).forEach(function (_ref) {\n      var key = _ref[0],\n          type = _ref[1];\n      type.setSchemaOptions(_this.spec, data === null || data === void 0 ? void 0 : data[key]);\n    });\n    this.data = data;\n  };\n\n  _proto.checkForField = function checkForField(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    var fieldChecker = this.spec[fieldName];\n\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return {\n        hasError: false\n      };\n    }\n\n    return fieldChecker.check(data[fieldName], data, fieldName);\n  };\n\n  _proto.checkForFieldAsync = function checkForFieldAsync(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    var fieldChecker = this.spec[fieldName];\n\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return Promise.resolve({\n        hasError: false\n      });\n    }\n\n    return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n  };\n\n  _proto.check = function check(data) {\n    var _this2 = this;\n\n    var checkResult = {};\n    Object.keys(this.spec).forEach(function (key) {\n      if (typeof data === 'object') {\n        checkResult[key] = _this2.checkForField(key, data);\n      }\n    });\n    return checkResult;\n  };\n\n  _proto.checkAsync = function checkAsync(data) {\n    var _this3 = this;\n\n    var checkResult = {};\n    var promises = [];\n    var keys = [];\n    Object.keys(this.spec).forEach(function (key) {\n      keys.push(key);\n      promises.push(_this3.checkForFieldAsync(key, data));\n    });\n    return Promise.all(promises).then(function (values) {\n      for (var i = 0; i < values.length; i += 1) {\n        checkResult[keys[i]] = values[i];\n      }\n\n      return checkResult;\n    });\n  };\n\n  return Schema;\n}();\nexport function SchemaModel(o) {\n  return new Schema(o);\n}\n\nSchemaModel.combine = function combine() {\n  for (var _len = arguments.length, specs = new Array(_len), _key = 0; _key < _len; _key++) {\n    specs[_key] = arguments[_key];\n  }\n\n  return new Schema(specs.map(function (model) {\n    return model.spec;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}